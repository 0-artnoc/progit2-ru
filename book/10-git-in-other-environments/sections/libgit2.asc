=== Git in Your Application

If your application is for developers, chances are good that it could benefit from integration with source control.
Even other applications, such as document editors, could potentially benefit from version-control features, and Git's model works very well for many different scenarios.

Beyond the most trivial use-cases, if you want to make your app work with Git repositories, you have essentially two choices.

==== Command-line Git

One option is to spawn a shell process and use the Git command-line tool to do the work.
This has the benefit of being canonical, and all of Git's features are supported.
This also happens to be fairly easy, as most runtime environments have a relatively simple facility for invoking a process with command-line arguments.
However, this approach does have some downsides.

One is that all the output is in plain text.
This means that you'll have to parse Git's occasionally-changing output format to read progress and result information, which can be inefficient and error-prone.

Another is the lack of error recovery.
If a repository is corrupted somehow, or the user has a malformed configuration value, Git will simply refuse to perform many operations.

Yet another is process management.
Git requires you to maintain a shell environment on a separate process, which can add unwanted complexity.
Trying to coordinate many of these processes (especially when potentially accessing the same repository from several processes) can be quite a challenge.

==== Libgit2

(((libgit2)))(((C)))
The other option at your disposal is to use Libgit2.
Libgit2 is a dependency-free implementation of Git, with a focus on having a nice API for use within other programs.

Here's what it looks like to read HEAD's commit message with Libgit2:

[source,c]
-----
git_repository *repo;
int error = git_repository_open(&repo, "/path/to/repository");

git_object *head_commit;
error = git_revparse_single(&head_commit, repo, "HEAD^{commit}");

git_commit *commit = (git_commit*)head_commit;
printf("%s", git_commit_message);
-----

Of course, it isn't very probable that you'll want to write C when using Libgit2.
Fortunately, there are a number of language-specific bindings available that make it fairly easy to work with Git repositories from your specific language and environment.

===== LibGit2Sharp

(((.NET)))(((C#)))(((Mono)))
If you're writing a .NET or Mono application, LibGit2Sharp (https://github.com/libgit2/libgit2sharp[]) is what you're looking for.
The bindings are written in C#, and great care has been taken to wrap the raw Libgit2 calls with native-feeling CLR APIs.
Here's what it looks like to read HEAD's commit message:

[source,csharp]
-----
new Repository(@"C:\path\to\repo").Head.Tip.Message;
-----

For desktop Windows applications, there's a NuGet package that will help you get started quickly.

===== objective-git

(((Apple)))(((Objective-C)))(((Cocoa)))
If your application is running on an Apple platform, you're likely using Objective-C as your implementation language.
Objective-Git (https://github.com/libgit2/objective-git[]) is the name of the Libgit2 bindings for that environment.
Again, here's how to read HEAD's commit message:

[source,objc]
-----
GTRepository *repo =
    [[GTRepository alloc] initWithURL:[NSURL fileURLWithPath: @"/path/to/repo"] error:NULL];
NSString *msg = [[[repo headReferenceWithError:NULL] resolvedTarget] message];
-----

===== rugged

(((Ruby)))
For Ruby programs, Rugged (https://github.com/libgit2/rugged[]) is the library to use.
Once again, HEAD's commit message:

[source,ruby]
----
repo = Rugged::Repository.new('path/to/my/repository')
msg = repo.lookup(repo.head.resolve.target).message
----


===== pygit2

(((Python)))
The bindings for Libgit2 in Python are called Pygit2, and can be found at http://www.pygit2.org/[].
As always, HEAD's commit message:

[source,python]
----
pygit2.Repository("/path/to/repo").head.resolve().get_object().message
----


===== Others

Libgit2 has been bound for a wide variety of programming languages and environments, including C++, Go, Node.js, Erlang, and the JVM.
The official collection of bindings can be found by browsing the repositories at https://github.com/libgit2/[].
