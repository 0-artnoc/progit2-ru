== GitHub

GitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects.
A large percentage of all Git repositories are hosted on GitHub, and most open-source projects use it for Git hosting, issue tracking, code review, and other things.
So while it's not exactly related to Git itself, there's a good chance that you'll need to interact with GitHub during your Git travels.

This chapter is about using GitHub.
We'll cover signing up for and managing an account, creating and using Git repositories, common workflows, interacting with projects, lots of little tips to make your life easier, and GitHub's programmatic interface.

=== Setting Up a User Account

The first thing you need to do is set up a free user account.
Simply visit https://github.com[], choose a user name that isn't already taken, provide an email address and a password, and click the big green ``Sign up for GitHub'' button.

.The GitHub sign-up form.
image::images/signup.png[The GitHub sign-up form.]

The next thing you'll see is the pricing page for upgraded plans, but it's safe to ignore this for now.
GitHub will send you an email to verify the address you provided.
Go ahead and do this, it's pretty important (as we'll see later).

Clicking the octocat logo at the top-left of the screen will take you to your dashboard page.
You're now ready to use GitHub.

==== SSH Access

As of right now, you're fully able to connect with Git repositories using the `https://` protocol.
If you'd like to use SSH remotes, you'll need to configure a public key.
(If you don't already have one, see <<_generate_ssh_key>>.)
Open up your account settings using the link at the top-right of the window:

.The ``Account settings'' link.
image::images/accountsettings.png[The ``Account settings'' link.]

Then select the ``SSH keys'' section along the left-hand side.

.The ``SSH keys'' link.
image::images/sshkeys.png[The ``SSH keys'' link.]

From there, click the ``Add an SSH key'' button, give your key a name, paste the contents of your `~/.ssh/id_rsa.pub` (or whatever you named it) public-key file into the text area, and click ``Add key''.

Next you can create a new repository.

=== Projects

The basic unit of operation on GitHub is the project.
Every project is centered on a Git repository, with several other tools surrounding and interacting with it.
Almost none of this is available outside a repository, so let's create one.

==== Creating a Repository

Start by clicking the ``New repository'' button on the right-hand side of the dashboard.

.The ``Your repositories'' area.
image::images/newrepo.png[The ``Your repositories'' area.]

This takes you to the ``new repository'' form:

.The ``new repository'' form.
image::images/newrepoform.png[The ``new repository'' form.]

All you really have to do here is provide a project name; the rest of the fields are completely optional.
For now, just click the ``Create Repository'' button, and boom – you have a new repository on GitHub, named `<user>/<name>`.

Since you have no code there yet, GitHub will show you instructions for how create a brand-new Git repository, or connect an existing Git project.
We won't belabor this here; if you need a refresher, check out <<_git_basics_chapter>>.

Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTP as `https://github.com/<user>/<project>`, and over SSH as `git@github.com:<user>/<project>`.
You can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them.

==== Adding Collaborators

Let’s add the rest of the team.
If John, Josie, and Jessica all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project as collaborators.
Doing so will give them ``push'' access, which means they have both read and write access to the project and Git repository.

Click the ``Settings'' link in the right-hand sidebar.

.The repository settings link.
image::images/reposettingslink.png[The repository settings link.]

Then select ``Collaborators'' from the menu on the left-hand side.
Then, just type a username into the box, and click ``Add collaborator.''
You can repeat this as many times as you like to grant access to everyone you like.
If you need to revoke access, just click the ``X'' on the right-hand side of their row.

[NOTE]
====
This feature is designed for collaboration with one or two people.
Later on in <<_github_orgs>>, we'll cover Organizations and Teams (which are much better for controlling access to larger numbers of people you know) and in <<_github_pull_requests>> we'll talk about Pull Requests (which are designed for collaborating with complete strangers).
====

==== Your Project

After you push your project up or have it imported from Subversion, you have a main project page that looks something like Figure 4-13.

.A project home page.
image::images/hubot.png[A project home page.]

When people visit your project, they see this page.
Along the top, there's a view of the commits, branches, releases, and contributors in this project, each of which takes you to more detail on these topics.
Along the side are the main activities you'll be using for your project:

* ``Code'' shows the latest version of the files in the repository, as well as a rendered view of the readme.
* ``Issues'' is where you go for reported problems or suggestions.
* ``Pull Requests'' are potential contributions, or work in progress.
* The ``Wiki'' is often used for contributor documentation.
* ``Pulse'' shows what's been happening in this project lately.
* ``Graphs'' has several analytical views of repository activity.
* ``Network'' shows a visual graph of this project and all its forks.

Don't worry if some of these don't make sense just yet.
We'll be covering them in the upcoming sections.

==== Forking Projects

If you want to contribute to an existing project to which you don’t have push access, you can ``fork'' the project.
What this means is that GitHub will make a copy of the project that is entirely yours; it lives in your user's namespace, and you can push to it.

This way, projects don’t have to worry about adding users as collaborators to give them push access.
People can fork a project, push to it, and contribute their changes back to the original repository by creating what's called a Pull Request.
This opens up a discussion thread with code review, and the owner and the contributor can then communicate about the change until the owner is happy with it, at which point the owner can merge it in.

To fork a project, visit the project page (in this case, `github/hubot`) and click the ``Fork'' button at the top-right of the page.

.The ``Fork'' button.
image::images/forkbutton.png[The ``Fork'' button.]

After a few seconds, you'll be taken to your new project page, which leads us to why the heck you'd want to do this in the first place.

=== The GitHub Flow

GitHub is designed around a particular collaboration workflow, centered on Pull Requests.
This flow works whether you're collaborating with a tightly-knit team in a single shared repository, or a globally-distributed network of strangers contributing to an open-source project through dozens of forks.

Here's how it works:

1. Create a branch from `master`.
2. Make some commits.
3. Open a Pull Request.
4. Discuss and continue committing.
5. Merge or close the PR.

Step 1 is pretty straightforward; all work in the GitHub flow takes place on branches, so it's isolated from the `master` branch.

Step 2 means you get a start on what you're doing.
Make a couple of steps in the direction you think the project is going to go.

Step 3 might seem a little early.
The work isn't finished, so why are you asking for it to be merged?
The reason is that opening a Pull Request doesn't just say ``here's some work I've done, it's ready for you to merge.''
What you're really saying is ``here's an idea I had, do you like where I'm going with it?''
Opening the Pull Request broadcasts to your team that you're working on something that they should see, and also (if your tooling is set up) starts the continuous-integration machinery to work on it.

Which leads us to step 4, which is where Pull Requests are their most useful.
Ongoing work turns into a conversation, because people on your team can see what you're working on, and help you out.
Since you essentially told your whole team ``hey, can you come look at this?'' they usually do.
The branch is still open, so you can continue making commits on it, either to continue work or to respond to feedback.
All this time, your team can provide more feedback, and the CI server is validating the changes.

At some point the Pull Request life cycle ends.
If the team is happy with the changes, they can merge the PR, and maybe throw a launch party.
If they decide this particular change isn't something they want, or that there's a better way, it can be closed.
Opening a PR early can often save weeks of work if the project is going in the wrong direction.


=== Discussions

==== Pull Request vs. Issue vs. Discussion

TODO: Will Discussions ship?

==== Markdown

==== Notifications

==== Email

==== Mentions

[[_github_orgs]]
=== Organizations

==== Teams

=== Tips and Tricks

==== Importing

==== Subversion Interop

==== hub or gh

==== pull-request refs

==== keyboard shortcuts

==== ignore whitespace

==== rev-parse specs

==== commits by author

==== .diff and .patch

==== Line linking

==== Search/Command Bar

=== The API

=== Summary

That’s all we’ll cover about GitHub, but it’s important to note how quickly you can do all this.
You can create an account, add a new project, and push to it in a matter of minutes.
If your project is open source, you also get a huge community of developers who now have visibility into your project and may well fork it and help contribute to it.
At the very least, this may be a way to get up and running with Git and try it out quickly.
In the next chapter, you'll learn more powerful tools and tips for dealing with complex situations, which will truly make you a Git master.
