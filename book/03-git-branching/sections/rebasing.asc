[[_rebasing]]
=== Перебазирование

(((rebasing)))
В GIT есть два способа внести изменения из одной ветки в другую: слияние (merge) и перебазирование (rebase).
В этом разделе вы узнаете, что такое перебазирование, как его осуществлять, почему это удивительный инструмент и в каких случаях вам не следует его использовать.

==== Простейшее перебазирование

Если вы вернетесь к более раннему примеру из <<_basic_merging>>, вы увидите, что разделили свою работу и сделали коммиты в две разные ветки.

.История коммитов простого разделения
image::images/basic-rebase-1.png[История коммитов простого разделения.]

Простейший способ выполнить слияние двух веток, как мы выяснили ранее, — это команда `merge`.
Она осуществляет трехстороннее слияние между двумя последними снимками (snapshot) сливаемых веток (`C3` и `C4`) и самого недавнего общего для этих веток родительского снимка (`C2`), создавая новый снимок (и коммит).

.Слияние разделенной истории коммитов
image::images/basic-rebase-2.png[Слияние разделенной истории коммитов.]

Тем не менее, есть и другой способ: вы можете взять те изменения, что были представлены в `C4` и применить их поверх `C3`.
В Git это называется _перебазированием_ (rebasing).
С помощью команды `rebase` вы можете взять все изменения, которые были зафиксированы (commited) в одной ветке и применить их к другой ветке.(((git commands, rebase)))

В данном примере для этого необходимо выполнить следующее:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Это работает следующим образом: берется общий родительский снимок (snapshot) двух веток (той, в которой вы находитесь, и той, поверх которой вы выполняете перебазирование); берется дельта (diff) каждого коммита той ветки, на который вы находитесь, эти дельты сохраняются во временные файлы; текущая ветка устанавливается на тот же коммит, что и ветка, поверх которой вы выполняете перебазирование; и, наконец, ранее сохраненные дельты применяются поочереди.

.Перебазирование изменений из `C4` поверх `C3`
image::images/basic-rebase-3.png[Перебазирование изменений из `C4` поверх `C3`.]

На этом моменте вы можете переключиться обратно на ветку master и выполнить слияние перемоткой.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Перемотка ветки master
image::images/basic-rebase-4.png[Перемотка ветки master.]

Теперь снимок (snapshot), на который указывает `C4'` абсолютно такой же, как тот, на который указывал `C5` в примере с трехсторонним слиянием.
Нет абсолютно никакой разницы в конечном результате между двумя показанными примерами, но перебазирование делает историю коммитов чище.
Если вы взглянете на историю перебазированной ветки, то увидите, что она выглядит абсолютно линейной: будто все операции были выполнены последовательно, даже если изначально они совершались параллельно.

Часто вы будете делать так для уверенности, что ваши коммиты могут быть бесконфликтно слиты в удалённую ветку — возможно в проект, куда вы пытаетесь внести вклад, но владельцем которого вы не являетесь.
В этом случае вам следует работать в своей ветке и затем перебазировать вашу работу поверх `origin/master`, когда вы будете готовы отправить свои изменения в основной проект.
Тогда владельцу проекта не придется делать никакой лишней работы — все решится простой перемоткой (fast-forward) или бесконфликтным слиянием.

Учтите, что снимок, на который ссылается ваш последний коммит — является ли он последним коммитом после перебазирования или коммитом слияния после слияния — в обоих случаях это один и тот же снимок, отличаются только истории коммитов.
Перебазирование повторяет изменения из одной ветки поверх другой в порядке, в котором эти изменения были представлены, в то время как слияние берет две конечные точки и сливает их вместе.

==== Более интересные перемещения

Также возможно сделать так, чтобы при перемещении воспроизведение коммитов начиналось не от той ветки, на которую делается перемещение. 
Возьмём, например, Историю разработки с тематической веткой, ответвлённой от другой тематической ветки. 
Вы создаете тематическую ветку (`server`), чтобы добавить в проект некоторые функциональности для серверной части, и делаете коммит. 
Затем вы выполнили ответвление, чтобы сделать изменения для клиентской части, и несколько раз выполнили коммиты. 
Наконец, вы вернулись на ветку `server` и сделали ещё несколько коммитов.

[[rbdiag_e]]
.История разработки с тематической веткой, ответвлённой от другой тематической ветки
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch.]

Предположим, вы решили, что хотите внести свои изменения для клиентской части в основную линию разработки для релиза, но при этом хотите оставить в стороне изменения для серверной части до полного тестирования.
Вы можете взять изменения из ветки `client`, которых нет в `server` (C8 и C9), и применить их на ветке `master` при помощи опции --onto команды git rebase:

[source,console]
----
$ git rebase --onto master server client
----

Это прямое указание “переключиться на ветку `client`, то есть взять изменения от общего предка веток `client` и `server` и повторить их на `master`”.
Несмотря на некоторую сложность этого способа, результат впечатляет. 

.Перемещение тематической ветки, ответвлённой от другой тематической ветки
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch.]

Теперь вы можете выполнить перемотку (fast-forward) для ветки `master` (см <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Перемотка ветки `master` для добавления изменений из ветки `client`
image::images/interesting-rebase-3.png[Fast-forwarding your master branch to include the client branch changes.]

Представим, что вы решили добавить наработки и из ветки `server`. 
Вы можете выполнить перемещение ветки `server` на ветку `master` без предварительного переключения на эту ветку при помощи команды git rebase [осн. ветка] [тем. ветка], которая делает тематическую ветку (в данном случае `server`) текущей и применяет её изменения к основной ветке (`master`):

[source,console]
----
$ git rebase master server
----

Эта команда поместит результаты работы в ветке `server` в начало ветки `master`, как это показано на <<rbdiag_h>>.

[[rbdiag_h]]
.Rebasing your server branch on top of your master branch
image::images/interesting-rebase-4.png[Rebasing your server branch on top of your master branch.]

После чего вы сможете выполнить перемотку основной ветки (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Теперь вы можете удалить ветки `client` и `server`, поскольку весь ваш прогресс уже включен [в основную линию разработки], и больше нет нужны сохранять эти ветки. 
Полную историю вашего рабочего процесса отражает рисунок <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Окончательная история коммитов
image::images/interesting-rebase-5.png[Final commit history.]

[[_rebase_peril]]
==== Опасности перемещения

(((rebasing, perils of)))
Но даже перебазирование, при всех своих достоинствах, не лишено недостатков, которые можно выразить одной строчкай: 

**Не перемещайте коммиты, уже отправленные в публичный репозиторий**

Если вы будете придерживаться этого правила, всё будет хорошо. 
Если не будете, люди возненавидят вас, а ваши друзья и семья будут вас презирать. 

Когда вы что-то перемещаете, вы отменяете существующие коммиты и создаёте новые, *похожие* на старые, но являющиеся другими. 
Если вы выкладываете (push) свои коммиты куда-нибудь, и другие забирают (pull) их себе и в дальнейшем основывают на них свою работу, а затем вы переделываете эти коммиты командой `git rebase` и выкладываете их снова, ваши коллеги будут вынуждены заново выполнять слияние для своих наработок. 
В итоге, когда вы в очередной раз попытаетесь включить их работу в свою, вы получите путаницу.

Давайте рассмотрим пример того, как перемещение публично доступных наработок может вызвать проблемы. 
Представьте себе, что вы склонировали себе репозиторий с центрального сервера и поработали в нём. 
И ваша история коммитов выглядит так: 

.Клонирование репозитория и выполнение в нем какой-то работы
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it."]

Теперь кто-то другой работает с репозиторием, используя слияние, и отправляет результаты своей работы на сервер. 
Вы стягиваете их к себе и сливаете новую удаленную ветку со своей работой. 
Тогда ваша история выглядит следующим образом: 

.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work."]

Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.
You then fetch from that server, bringing down the new commits.

[[_pre_merge_rebase_work]]
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png["Someone pushes rebased commits, abandoning commits you've based your work on."]

Now you're both in a pickle.
If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:

[[_merge_rebase_work]]
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]

If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.
Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.
It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why she rebased in the first place.

[[_rebase_rebase]]
==== Rebase When You Rebase

If you *do* find yourself in a situation like this, Git has some further magic that might help you out. If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.

It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit. This is called a ``patch-id''.

If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:

* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]

This only works if C4 and C4' that your partner made are almost exactly the same patch. Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).

You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`. Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.

If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.

If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.

If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.

One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.

The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.

Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.

In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
