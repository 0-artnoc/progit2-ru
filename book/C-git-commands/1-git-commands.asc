[appendix]
== Git Commands

Throughout the book we have introduced dozens of Git commands and have tried hard to introduce them within something of a narrative, adding more commands to the story slowly. However, this leaves us with examples of usage of the commands somewhat scattered throughout the whole book.

In this appendix, we'll go through all the Git commands we addressed throughout the book, grouped roughly by what they're used for. We'll talk about what each command very generally does and then point out where in the book you can find us having used it.

=== Setup and Config

There are two commands that are used quite a lot, from the first invocations of Git to common every day tweaking and referencing, the `config` and `help` commands.

==== git config

Git has a default way of doing hundreds of things. For a lot of these things, you can tell Git to default to doing them a different way, or set your preferences. This invovles everything from telling Git what your name is to specific terminal color preferences or what editor you use. There are several files this command will read from and write to so you can set values globally or down to specific repositories.

The `git config` command has been used in nearly every chapter of the book.

In <<_first_time>> we used it to specify our name, email address and editor preference before we even got started using Git.

In <<_aliases>> we showed how you could use it to create shorthand commands that expand to long option sequences so you don't have to type them every time.

In <<_rebasing>> we used it to make `--rebase` the default when you run `git pull`.

In <<_credential_caching>> we used it to set up a default store for your HTTP passwords.

In <<_keyword_expansion> we showed how to set up smudge and clean filters on content coming in and out of Git.

Finally, basically the entirety of <<_git_config>> is dedicated to the command.

==== git help

The `git help` command is used to show you all the documentation shipped with Git about any command. While we're giving a rough overview of most of the more popular ones in this appendix, for a full listing of all of the possible options and flags for every command, you can always run `git help <command>`.

We introduced the `git help` command in <<_git_help>> and showed you how to use it to find more information about the `git shell` in <<_setting_up_server>>.

=== Getting and Creating Projects

There are two ways to get a Git repository. One is to copy it from an existing repository on the network or elsewhere and the other is to create a new one in an existing directory.

==== git init

To take a directory and turn it into a new Git repository so you can start version controlling it, you can simply run `git init`.

We first introduce this in [[_getting_a_repo]], where we show creating a brand new repository to start working with.

We talk briefly about how you can change the default branch from ``master'' in <<_remote_branches>>.

We use this command to create an empty bare  repository for a server in <<_bare_repo>>.

Finally, we go through some of the details of what it actually does behind the scenes in <<_plumbing_porcelain>>.

==== git clone

The `git clone` command is actually something of a wrapper around several other commands. It creates a new directory, goes into it and runs `git init` to make it an empty Git repository, adds a remote (`git remote add`) to the URL that you pass it (by default named `origin`), runs a `git fetch` from that remote repository and then checks out the latest commit into your working directory with `git checkout`.

The `git clone` command is used in dozens of places throughout the book, but we'll just list a few interesting places.

It's basically introduced and explained in <<_git_cloning>>, where we go through a few examples.

In <<_git_on_server>> we look at using the `--bare` option to create a copy of a Git repository with no working directory.

In <<_bundling>> we use it to unbundle a bundled Git repository.

Finally, in <<_cloning_submodules>> we learn the `--recursive` option to make cloning a repository with submodules a little simpler.

Though it's used in many other places through the book, these are the ones that are somewhat unique or where it is used in ways that are a little different.

=== Basic Snapshotting

For the basic workflow of staging content and committing it to your history, there are only a few basic commands.

==== git add

==== git status

==== git diff

==== git commit

==== git reset

==== git rm

==== git mv

The `git mv` command is a thin convience command to move a file and then run `git add` on the new file and `git rm` on the old file.

We only briefly mention this command in <<_git_mv>>.

=== Branching and Merging

branch
checkout
merge
mergetool
log
stash
tag

=== Sharing and Updating Projects

fetch
pull
push
remote
submodule

=== Inspection and Comparison

show
log
diff
shortlog
describe

=== Patching

apply
cherry-pick
diff
rebase
revert

=== Debugging

bisect
blame
grep

=== Email

am
apply
format-patch
send-email
request-pull

=== External Systems

svn
fast-import

=== Administration

clean
gc
fsck
reflog
filter-branch
instaweb
archive

=== Server Admin

daemon
update-server-info

=== Plumbing Commands

cat-file
commit-tree
count-objects
diff-index
for-each-ref
hash-object
ls-files
merge-base
read-tree
rev-list
rev-parse
show-ref
symbolic-ref
update-index
update-ref
verify-pack
write-tree
