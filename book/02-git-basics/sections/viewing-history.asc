[[_viewing_history]]
=== Просмотр истории коммитов

После того, как вы создали несколько коммитов или же склонировали репозиторий с уже существующей историей коммитов, вероятно вам понадобится возможность посмотреть что было сделано – историю коммитов.
Одним из основных и наиболее мощных инструментов для этого является команда `git log`.

Следующие несколько примеров используют очень простой проект ``simplegit''.
Что бы склонировать проект, используйте команду

[source,console]
----
git clone https://github.com/schacon/simplegit-progit
----

Если вы запустите команду `git log` в папке склонированного проекта, вы увидите следующий вывод:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

По умолчанию (без аргументов) `git log` перечисляет коммиты, сделанные в репозитории в обратном к хронологическому порядке – последние коммиты находятся вверху.
С примера можно увидеть, что данная команда перечисляет коммиты с их SHA-1 чек-суммами, именем и емейлом автора, датой создания и сообщением коммита.

Команда `git log` имеет очень большое количество опций для поиска коммитов по разным критериям.
Посмотрим на наиболее популярные из них.

Одним из наиболее полезных аргументов является `-p`, который показывает diff внесенный в каждый коммит.
Так же вы можете использовать аргумент `-2`, который позволяет установить лимит на вывод количества коммитов. В данном случае из будет только 2:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

Эта опция отображает аналогичную информацию но содержит diff для каждой записи.
Очень удобно использовать данную опцию для код рев'ю или для быстрого просмотра серии изменений, добавленной коллаборатором.
Так же есть возможность использовать серию опция для обобщения.
Например, если вы хотите увидеть сокращенную статистику для каждого коммита, вы можете использовать опцию `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Как вы видите, опция `--stat` печатает под каждым из коммитов список и количество измененных файлов а также сколько строк в каждом из файлов было добавлено и удалено.
В конце можно увидеть суммарную таблицу изменений.

Следующей действительно полезной опцией является `--pretty`.
Эта опция меняет формат вывода.
Существует несколько встроенных вариантов отображения.
Например, опция `oneline` печатает каждый коммит в одну строку, что может быть очень удобным если вы просматриваете большое количество коммитов.
К тому же, опции `short`, `full` и `fuller` делают вывод приблизительно в том же формате, но с меньшим или большим количеством информации, соответственно:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Наиболее интересной опцией является `format`. Она позволяет создать свой формат для вывода информации.
Особенно это может быть полезным когда вы хотите сгенерировать вывод для автоматического анализа – так как вы указываете формат явно, он не будет изменен после обновления Git:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> отображает наиболее полезные опции для изменения формата.

[[pretty_format]]
.Полезные опции для `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Опция    | Описания вывода
| `%H`     | Хеш коммита
| `%h`     | Сокращенный хеш коммита
| `%T`     | Хеш дерева
| `%t`     | Сокращенный хеш дерева
| `%P`     | Хеш родителей
| `%p`     | Сокращенный хеш родителей
| `%an`    | Имя автора
| `%ae`    | Емейл автора
| `%ad`    | Дата автора (format respects the --date=option)
| `%ar`    | Относительная дата коммитера
| `%cn`    | Имя коммитера
| `%ce`    | Емейл коммитера
| `%cd`    | Дата коммитера
| `%cr`    | Относительная дата коммитера
| `%s`     | Содержание
|================================

Вам наверное интересно, какая же разница между _автором_ и _коммитером_.
Автор – это человек, изначально сделавший работу, а коммитер – это человек, который последним применил эту работу.
Другими словами, если вы создадите патч для какого-то проекта, а один из основных членов команды этого проекта применит этот патч, вы оба получите статус участника – вы как автор и основной член команды как коммитер.

Опции oneline и format являются особенно полезными с другой опцией команды  `log` - `--graph`.
С этой опцией вы сможете увидеть небольшой ASCII граф, который показывает текущую ветку и историю слияний:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Данный вывод будет нам очень интерес в следующей главе, где мы рассмотрим ветвления и слияния.

Мы рассмотрели только несколько простых опция для форматирования вывода с помощью команды `git log`. На самом деле их немного больше.
<<log_options>> содержит описание как уже рассмотренных опций, так и несколько других наиболее распространенных опций, которые могут быть полезными в зависимости о того, как они меняют формат вывода команды `git log`.


[[log_options]]
.Наиболее распространенные опции для команды `git log`
[cols="1,4",options="header"]
|================================
| Опция             | Описание
| `-p`              | Показывает патч для каждого коммита.
| `--stat`          | Показывает статистику измененных файлов для каждого коммита.
| `--shortstat`     | Отображает только строку с количеством изменений/вставок/удалений для команды --stat.
| `--name-only`     | Показывает список измененных файлов после информации о коммите.
| `--name-status`   | Показывает список файлов, которые добавлены/изменены/удалены.
| `--abbrev-commit` | Показывает только несколько символом SHA-1 чек-суммы вместо всех 40.
| `--relative-date` | Отображает дату в относительном формате (например, "2 недели назад") вместо стандартного формата даты.
| `--graph`         | Отображает ASCII граф с ветвлениями и историей слияния.
| `--pretty`        | Показывает коммиты в альтернативном формате. Возможные варианты опций: oneline, short, full, fuller и format (с помощью которого вы можете указать свой формат).
|================================

==== Limiting Log Output

In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.
You've seen one such option already – the `-2` option, which show only the last two commits.
In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

However, the time-limiting options such as `--since` and `--until` are very useful.
For example, this command gets the list of commits made in the last two weeks:

[source,console]
----
$ git log --since=2.weeks
----

This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

You can also filter the list to commits that match some search criteria.
The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.
(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)

Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.  For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

[source,console]
----
$ git log -Sfunction_name
----

The last really useful option to pass to `git log` as a filter is a path.
If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.

In <<limit_options>> we'll list these and a few other common options for your reference.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano and were not merges in the month of October 2008, you can run something like this:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.
