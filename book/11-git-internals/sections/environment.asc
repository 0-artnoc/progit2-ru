=== Environment Variables

Git always runs inside a `bash` shell, and uses a number of shell environment variables to determine how it behaves.
Occasionally, it comes in handy to know what these are, and how they can be used to make Git behave the way you want it to.


==== Global Behavior

Some of Git's behavior as a computer program depends on environment variables.

* `GIT_EXEC_PATH` determines where Git looks for its sub-programs (like `git-commit`, `git-diff`, and others).
  You can check the current setting by running `git --exec-path`.

* `HOME` isn't usually considered customizable (too many other things depend on it), but it's where Git looks for the global configuration file.
  If you want a truly portable Git installation, complete with global configuration, you can override `HOME` in the portable Git's shell profile.

* `PREFIX` is similar, but for the system-wide configuration.
  Git looks for this file at `$PREFIX/etc/gitconfig`.

* `GIT_CONFIG_NOSYSTEM`, if set, disables the use of the system-wide configuration file.
  This is useful if your system config is interfering with your commands, but you don't have access to change or remove it.

==== Repository Locations

Git uses several environment variables to find the paths to files related to the current repository:

* `GIT_DIR` is the location of the `.git` folder.
  If this isn't specified, Git walks up the directory tree until it gets to `~`, looking for a `.git` directory at every step.

* `GIT_CEILING_DIRECTORIES` controls the behavior of searching for a `.git` directory.
  If you access directories that are slow to load (such as those on a tape drive, or across a slow network connection), you may want to have Git stop trying earlier than it might otherwise.

* `GIT_DISCOVERY_ACROSS_FILESYSTEM` can be used to allow Git to cross filesystem boundaries when searching for a `.git` directory (the default behavior is not to cross the boundary).

* `GIT_WORK_TREE` is the location of the root of the working directory for a non-bare repository.
  If not specified, the parent directory of `$GIT_DIR` is used.

* `GIT_INDEX_FILE` is the path to the index file (non-bare repositories only).

* `GIT_OBJECT_DIRECTORY` can be used to specify the location of the directory that usually resides at `.git/objects`.

* `GIT_ALTERNATE_OBJECT_DIRECTORIES` is a colon-separated list (formatted like `/dir/one:/dir/two:â€¦`) which tells Git where to check for objects if they aren't in `GIT_OBJECT_DIRECTORY`.
  If you happen to have a lot of projects with large files that have the exact same contents, this can be used to avoid storing too many copies of them.


==== Pathspecs

* `GIT_LITERAL_PATHSPECS`

* `GIT_GLOB_PATHSPECS/GIT_NOGLOB_PATHSPECS`

* `GIT_ICASE_PATHSPECS`

==== Commiting

* `GIT_AUTHOR_NAME`

* `GIT_AUTHOR_EMAIL`

* `GIT_AUTHOR_DATE`

* `GIT_COMMITTER_NAME`

* `GIT_COMMITTER_EMAIL`

* `GIT_COMMITTER_DATE`

* `EMAIL`


==== Diffing and Merging

GIT_DIFF_OPTS
GIT_EXTERNAL_DIFF
GIT_DIFF_PATH_COUNTER
GIT_DIFF_PATH_TOTAL
GIT_MERGE_VERBOSITY

==== Miscellaneous

GIT_PAGER
GIT_EDITOR
GIT_SSH
GIT_ASKPASS
GIT_NAMESPACE
GIT_FLUSH
GIT_TRACE
GIT_TRACE_PACK_ACCESS
GIT_TRACE_PACKET
GIT_TRACE_PERFORMANCE
GIT_TRACE_SETUP
GIT_TRACE_SHALLOW
GIT_REFLOG_ACTION
