=== О системе контроля версий

(((version control)))
Что такое "система контроля версий", и почему это важно?
Система контроля версий это система, записывающая изменения в файл или набор файлов в течение большого периода времени, так что вы сможете позже вернуться к определенной версии.
Для примеров в этой книге вы используете исходные файлы ОС в качестве файлов, контролируемых системой версионирования, тем не менее, в обычной жизни вы можете делать это с почти любыми типами файлов.

Если вы графический или web дизайнер и хотите сохранить каждую версию изображения или макета (скорее всего, захотите), система контроля версий (Version Control System, VCS) как раз то, что нужно.
Она позволяет вернуть файлы к состоянию, в котором они были до изменений, вернуть проект к исходному состоянию, увидеть изменения, увидеть, кто последний менял что-то и спровоцировал проблему, кто поставил задачу и когда, и много других возможностей.
Использование VCS также значит в целом, что если вы сломали что-то или потеряли файлы, вы спокойно можете всё исправить.
В дополнение ко всему вы получите всё это без каких-либо накладок.

==== Локальные системы контроля версий

(((version control,local)))
Многие люди в качестве метода контроля версий применяют копирование файлов в отдельную директорию (возможно даже директорию с отметкой по времени, если они достаточно умны).
Данный подход очень распространён из-за его простоты, однако он, невероятным образом, подвержен появлению ошибок.
Можно легко забыть в какой директории вы находитесь и случайно изменить не тот файл или скопировать не те файлы, которые вы хотели.

Для того, чтобы решить эту проблему, программисты давным давно разработали локальные СКВ, имеющие простую базу данных, которая содержит все изменения в файлах под контролем ревизий.

.Локальный контроль версий.
image::images/local.png[Local version control diagram]

Одной из популярных СКВ была система RCS, которая и сегодня распространяется с многими компьютерами.
Даже популярная операционная система Mac OS X предоставляет команду `rcs`, после установки Developer Tools.
RCS хранит на диске наборы патчей (разниц между файлами) в специальном формате, накладывая которые она может воссоздавать состояние каждого файла в заданный момент времени.

==== Централизованные системы контроля версий

(((version control,centralized)))
Следующая серьёзная проблема с которой сталкиваются люди это необходимость взаимодействовать с разработчиками на других компьютерах.
Для того, чтобы разобраться с ней, были разработаны централизованные системы контроля версий (ЦСКВ).
Такие системы как: CVS, Subversion и Perforce, имеют единственный сервер, содержащий все версии файлов, и некое количество клиентов, которые получают файлы из этого центрального хранилища. (((CVS)))(((Subversion)))(((Perforce)))
На протяжении многих лет это был стандарт для систем контроля версий.

.Централизованный контроль версий.
image::images/centralized.png[Centralized version control diagram]

Такой подход имеет множество преимуществ, особенно перед локальными СКВ.
Например, все разработчики в проекте, в определённой степени, знают чем занимается каждый из них.
Администраторы контролируют кто и что может делать, и это гораздо проще, администрировать ЦСКВ, чем разбираться с локальными базами данных на каждом клиенте.

Несмотря на это, данный подход тоже имеет серьёзные минусы.
Самый очевидный минус, это единая точка краха, которая представлена централизованным сервером.
Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать контроль версий для сохранения изменений над которыми он работает, а также никто не сможет обмениваться этими изменениями с другими разработчиками.
Если жёсткий диск, на котором хранится центральная БД, повреждён, а своевременные бэкапы отсутствуют, вы потеряете всё - всю историю проекта, не считая единичных снимков репозитория, которые сохранились на локальных машинах разработчиков.
Локальные СКВ страдают от той же самой проблемы - когда вся история проекта хранится в одном месте, вы рискуете потерять всё.

==== Децентрализованные системы контроля версий

(((version control,distributed)))
Здесь в игру вступают децентрализованные системы контроля версий (ДСКВ).
В ДСКВ (таких как Git, Mercurial, Bazaar или Darcs), клиенты не просто скачивают снимок всех файлов (состояние файлов на определённый момент времени): они полностью копируют репозиторий.
В этом случае, если один из серверов, через который разработчики обменивались данными, умрёт, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы.
Каждая копия репозитория является полным бэкапом всех данных.

.Децентрализованный контроль версий.
image::images/distributed.png[Distributed version control diagram]

Более того, многие из ДСКВ могут одновременно взаимодействовать с несколькими удалёнными репозиториями, благодаря этому вы можете работать с различными группами людей, применяя различные подходы единовременно, в рамках одного проекта.
Это позволяет применять сразу несколько подходов в разработке, например иерархические модели, что совершенно невозможно в централизованных системах.
