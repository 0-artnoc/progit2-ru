=== О системе контроля версий

(((version control)))
Что такое "система контроля версий", и почему это важно?
Система контроля версий это система, записывающая изменения в файл или набор файлов в течение большого периода времени, так что вы сможете позже вернуться к определенной версии.
Для примеров в этой книге вы используете исходные файлы ОС в качестве файлов, контролируемых системой версионирования, тем не менее, в обычной жизни вы можете делать это с почти любыми типами файлов.

Если вы графический или web дизайнер и хотите сохранить каждую версию изображения или макета (скорее всего, захотите), система контроля версий (Version Control System, VCS) как раз то, что нужно.
Она позволяет вернуть файлы к состоянию, в котором они были до изменений, вернуть проект к исходному состоянию, увидеть изменения, увидеть, кто последний менял что-то и спровоцировал проблему, кто поставил задачу и когда, и много других возможностей.
Использование VCS также значит в целом, что если вы сломали что-то или потеряли файлы, вы спокойно можете всё исправить.
В дополнение ко всему вы получите всё это без каких-либо накладок.

==== Local Version Control Systems

(((version control,local)))
Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever).
This approach is very common because it is so simple, but it is also incredibly error prone.
It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.

To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.

.Local version control.
image::images/local.png[Local version control diagram]

One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.
Even the popular Mac OS X operating system includes the `rcs` command when you install the Developer Tools.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every checkout is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
