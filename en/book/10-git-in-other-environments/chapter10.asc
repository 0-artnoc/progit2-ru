== Git in Other Environments

If you've read this far, you've learned a lot about how to use Git at the command line.
You can work with local files, connect your repository to others over a network, and work effectively with others.
But the story doesn't end there; Git is usually used as part of a larger ecosystem, and the terminal isn't always the best way to work with Git.
Now we'll take a look at some of the other kinds of environments where Git can be useful.

=== Graphical Interfaces

Git's native environment is in the terminal.
New features show up there first, and only at the command line is the full power of Git completely at your disposal.
But plain text isn't the best choice for all tasks; sometimes a visual representation is what you need, and some users are much more comfortable with a point-and-click interface.

Remember that different interfaces are tailored for different workflows.
Some clients only expose only a carefully curated subset of Git functionality, in order to support a specific way of using Git that the author considers effective.
When viewed in this light, none of these tools is ``better'' than any of the others, they're simply more fit for their intended purpose.
Also note that there's nothing these graphical clients can do that the command-line client can't.

==== gitk & git-gui

When you install Git, you also get its visual tools, `gitk` and `git-gui`.

`gitk` is a graphical shell over `git log`, and it acts primarily as a history viewer.
It is easiest to invoke from the command-line; `cd` into a Git repository, and type:

-----
gitk [git log options]
-----

Gitk accepts many command-line options, most of which are passed through to the underlying `git log` action.
Probably one of the most useful is the `--all` flag, which tells gitk to show commits reachable from _any_ ref, not just HEAD.
Gitk's interface looks like <<gitk>>.

[[gitk]]
.The `gitk` history viewer.
image::images/gitk.png[The `gitk` history viewer.]

On the top is something that looks a bit like the output of `git log --graph`; each dot represents a commit, and the graph is decorated with refs.
The yellow dot represents HEAD, and the red dot represents changes that are yet to become a commit.
At the bottom is a view of the selected commit; the comments and patch on the left, and a summary view on the right.
In between is a collection of controls used for searching history.

`git-gui`, on the other hand, is primarily a tool for crafting commits.
It, too, is easiest to invoke from the command line:

-----
git gui
-----

And it looks something like <<git-gui>>.

[[git-gui]]
.The `git-gui` commit tool.
image::images/git-gui.png[The `git-gui` commit tool.]

==== GitHub for Windows/Mac

==== Other GUIs

=== Git in Visual Studio

=== Git in Eclipse

=== Git in Bash

=== Git in Zsh

=== Git in Powershell

=== Git in Your Application

==== libgit2

==== libgit2sharp

==== objective-git

==== rugged

==== pygit2
